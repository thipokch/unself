name: unself
repository: https://github.com/thipokch/unself

packages:
  - "**"
ignore:
  - "tool/template/**"

command:
  bootstrap:
    usePubspecOverrides: true
    runPubGetInParallel: true
    # It seems so that running "pub get" in parallel cause race condition.
    # See: https://github.com/dart-lang/pub/issues/3404).

scripts:
  #
  #   Melos Lifecycle
  #

  postclean: |
    melos exec -c 6 -- "flutter clean"

    echo "Cleaning secrets repo..."
    rm -rvf ./.secrets

  #
  #   Setup
  #

  setup:
    description: Setup for local development. See 'setup:secrets' for variables.
    run: |
      melos clean && \
      melos bootstrap && \
      melos setup:mason && \
      melos setup:secrets && \
      melos setup:hygiene

  setup:ci:
    description: Setup for CI build. See 'setup:secrets' for variables.
    run: |
      melos clean && \
      melos bootstrap && \
      melos setup:secrets && \
      git config --global user.email "noreply@github.com" && \
      git config --global user.name "GitHub"

  setup:hygiene:
    description: Setup scripts to run on git hook events.
    run: |
      chmod -R +x .githook/ && \
      git config core.hooksPath .githook/

  setup:secrets:
    description: |
      Clone secrets repo.
      Decode and decrypt google services config in cloned secrets repo.
      For local development, use .env to set variables:
        SECRETS_GITHUB_TOKEN - Personal acccess token.
        SECRETS_GITHUB_PATH - Path of Github repo.
        SECRETS_PASSWORD - Encryption passphrase.
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..." && \

      export APP_DIR=$MELOS_ROOT_PATH/app/unself && \
      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets && \
      echo "Using '$SECRETS_DIR'..." && \

      echo "Cleaning previous secrets repo..." && \
      rm -rf $SECRETS_DIR && \

      echo "Using '$SECRETS_GITHUB_PATH'..." && \
      git clone https://$SECRETS_GITHUB_TOKEN@github.com/$SECRETS_GITHUB_PATH $SECRETS_DIR && \

      for f in $(find $SECRETS_DIR -name '*.enc'); do 
        echo "Decrypting ${f%.enc}..."
        openssl aes-256-cbc -md md5 -d -a -v -k $SECRETS_PASSWORD -in $f -out ${f%.enc}
        rm -rfv $f | xargs echo "Decrypted and removed: $1"
      done && \

      export BUILD_ENV=dev && \
      melos setup:build && \

      echo "Copying environment configurations..." && \
      cp -v -r "$SECRETS_DIR/flutter/"* "$APP_DIR/lib" && \
      flutter format $APP_DIR/lib/**/*.dart

  setup:mason:
    description: Setup mason
    # Workaround: checked_yaml 2.0.2 is not used for compiling pre-gen scripts.
    run: |
      dart pub global activate mason_cli && \
      dart pub cache add checked_yaml -v 2.0.1 && \
      mason get

  setup:build:
    description: Setup for building given environment.
      For local development, use .env to set variables
      BUILD_ENV - build environment (dev, stg, prd)
    run: |
      export SECRETS_DIR=$MELOS_ROOT_PATH/.secrets && \

      echo "Copying Google service configurations for $BUILD_ENV environment..." && \
      cp -v -r "$SECRETS_DIR/android/$BUILD_ENV/"* "$APP_DIR/android/"  && \
      cp -v -r "$SECRETS_DIR/apple/$BUILD_ENV/"* "$APP_DIR/ios/"  && \
      cp -v -r "$SECRETS_DIR/apple/$BUILD_ENV/"* "$APP_DIR/macos/"
    # Web is configured from RudderStack
    # cp -v -r "$SECRETS_DIR/darwin/$BUILD_ENV/"* "$APP_DIR/macos/" && \
    # cp -v -r "$SECRETS_DIR/web/$BUILD_ENV/"* "$APP_DIR/web/"

  setup:upgrade:
    run: |
      melos exec -c 1 -- \
        flutter pub upgrade --major-versions --dry-run

  setup:outdated:
    run: |
      melos exec -c 1 -- \
        flutter pub outdated

  #
  #   Hygiene
  #

  hygiene:
    description: Run all targets generally expected for local quality check. For visibility, CI uses individual steps.
    run: |
      melos setup && \
      melos build:generate && \
      melos hygiene:format && \
      melos hygiene:analyze && \
      melos test:fast
    # melos hygiene:metrics && \ # Stack overflow

  hygiene:commit:
    description: Run local quality check before commit.
    run: |
      melos hygiene:format && \
      melos hygiene:analyze && \ 
      melos test:fast
    # melos hygiene:metrics && \ # Stack overflow

  hygiene:clean:
    # melos hygiene:clean -- --exclude=.env
    description: Clean things very deeply, can be used to establish "pristine checkout" status.
    run: git clean -x -d -f -q

  hygiene:metrics:
    description: |
      Run `dart_code_metrics` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 --ignore="*test*" --depends-on="dart_code_metrics" -- \
        flutter pub run dart_code_metrics:metrics analyze lib

  hygiene:deps:
    description: |
      Run `dependency_validator` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 --ignore="*test*" --depends-on="dependency_validator" -- \
        flutter pub run dependency_validator

  hygiene:analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    description: |
      Run `flutter analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    run: |
      melos exec -c 1 --scope="unself*" -- \
        flutter analyze . --fatal-infos

  hygiene:format:
    description: |
      Run `flutter format` in all packages.
        - Note: Exits with non-zero exit code if formatting is needed.
    run: |
      melos exec -c 1 -- \
          flutter format --output=none --set-exit-if-changed .

  hygiene:format:fix:
    description: |
      Fix `flutter format` in all packages.
    run: |
      melos exec -c 1 -- \
          flutter format .

  #
  #   Build
  #

  build:num:
    description: |
      Bump build number
      For local development, use .env to set variables
        BUILD_NUM - build number
    run: dart ./tool/script/bin/version_build.dart

  build:generate:
    description: Run all code generators.
    run: |
      melos build:runner && \
      melos build:splash

  build:watch:
    description: Run all code generators.
    run: |
      melos exec --depends-on="build_runner" -- \
        flutter pub run build_runner watch --delete-conflicting-outputs

  build:runner:
    run: |
      melos exec --depends-on="build_runner" -- \
        flutter pub run build_runner clean &&
      melos exec --depends-on="build_runner" -- \
        flutter pub run build_runner build --delete-conflicting-outputs

  build:splash:
    run: |
      melos exec --depends-on="flutter_native_splash" -- \
        flutter pub run flutter_native_splash:create

  build:doc:
    description: Generate documentation for the package.
    select-package:
      scope: "unself_app"
    exec: dart doc .

  #   iOS

  build:ios:
    description: |
      Build ios for given environment. Uses fastlane to build and codesign.
      For local development, use .env to set variables
        BUILD_ENV - build environment (dev, stg, prd)
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export APP_DIR=$MELOS_ROOT_PATH/app/unself && \
      export MATCH_GIT_URL=$MELOS_ROOT_PATH/.secrets && \
      export MATCH_PASSWORD=$SECRETS_PASSWORD && \

      melos setup:build && \

      cd $APP_DIR/ios && \
      bundle exec fastlane build_$BUILD_ENV

  build:ios:pre:
    description: Xcode Pre-build command. Requires ENVIRONMENT
    run: |
      export BUILD_ENV=$FLAVOR && \
      export APP_DIR=$MELOS_ROOT_PATH/app/unself && \
      $FLUTTER_ROOT/bin/dart pub global run melos setup:build

  build:ios:dev:
    description: Builds ios for development.
    run: export BUILD_ENV=dev && melos build:ios

  build:ios:stg:
    description: Builds ios for development.
    run: export BUILD_ENV=stg && melos build:ios

  build:ios:prd:
    description: Builds ios for production.
    run: export BUILD_ENV=prd && melos build:ios

  #   android

  build:and:
    description: Build android for given environment.
      For local development, use .env to set variables
      BUILD_ENV - build environment (dev, stg, prd)
    run: |
      [ ! -f .env ] || export $(grep -v '^#' .env | xargs) && \
        echo "Environment variables from .env exported..."

      export APP_DIR=$MELOS_ROOT_PATH/app/unself && \

      melos setup:build && \

      cd $APP_DIR && \
      if [ $BUILD_ENV == "dev" ]
      then
        flutter build apk --debug --flavor=$BUILD_ENV --target=lib/$BUILD_ENV.dart
      else
        flutter build apk --release --flavor=$BUILD_ENV --target=lib/$BUILD_ENV.dart
      fi

  build:and:dev:
    description: Builds android for development.
    run: export BUILD_ENV=dev && melos build:and

  build:and:stg:
    description: Builds android for staging.
    run: export BUILD_ENV=stg && melos build:and

  build:and:prd:
    description: Builds android for production.
    run: export BUILD_ENV=prd && melos build:and

  #   macos - Flavors are not supported yet

  build:mac:pre:
    description: Xcode Pre-build command. Requires ENVIRONMENT
    run: |
      export BUILD_ENV=$FLAVOR && \
      export APP_DIR=$MELOS_ROOT_PATH/app/unself && \
      $FLUTTER_ROOT/bin/dart pub global run melos setup:build

  #
  #   Test
  #

  test:fast:
    description: Flutter tests (fail-fast)
    run: |
      melos exec -c 6 --dir-exists=test --fail-fast -- \
        "flutter test"
